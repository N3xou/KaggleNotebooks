{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.11","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":17592,"databundleVersionId":899221,"sourceType":"competition"}],"dockerImageVersionId":31040,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-05-30T20:58:07.469300Z","iopub.execute_input":"2025-05-30T20:58:07.469626Z","iopub.status.idle":"2025-05-30T20:58:07.956729Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import numpy as np\nimport random\nimport kaggle_environments\nfrom kaggle_environments import make, evaluate, utils\nimport matplotlib.pyplot as plt\nimport inspect\nimport os\nimport time\nenv = make(\"connectx\", debug=True)\n#!pip install kaggle-environments","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-30T20:58:07.963462Z","iopub.execute_input":"2025-05-30T20:58:07.963734Z","iopub.status.idle":"2025-05-30T20:58:18.317904Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"def agent(observation, configuration):\n    ROW_COUNT = configuration.rows\n    COLUMN_COUNT = configuration.columns\n    WINDOW_LENGTH = 4\n    EMPTY = 0\n    PLAYER_PIECE = observation.mark\n    OPPONENT_PIECE = 1 if PLAYER_PIECE == 2 else 2\n    MAX_DEPTH = 7\n\n    def board_from_obs(obs):\n        return np.reshape(obs.board, (ROW_COUNT, COLUMN_COUNT))\n    def order_moves(board, valid_locations, piece):\n        scores = []\n        for col in valid_locations:\n            row = get_next_open_row(board, col)\n            b_copy = board.copy()\n            drop_piece(b_copy, row, col, piece)\n            scores.append((col, score_position(b_copy, piece)))\n    # Descending for maximizing, ascending for minimizing\n        return [col for col, score in sorted(scores, key=lambda x: x[1], reverse=True)]\n    \n    def is_valid_location(board, col):\n        return board[0][col] == 0\n\n    def get_valid_locations(board):\n        return [c for c in range(COLUMN_COUNT) if is_valid_location(board, c)]\n\n    def drop_piece(board, row, col, piece):\n        board[row][col] = piece\n\n    def get_next_open_row(board, col):\n        for r in range(ROW_COUNT - 1, -1, -1):\n            if board[r][col] == 0:\n                return r\n\n    def winning_move(board, piece):\n        # Check all win conditions\n        for c in range(COLUMN_COUNT - 3):\n            for r in range(ROW_COUNT):\n                if all(board[r][c+i] == piece for i in range(WINDOW_LENGTH)):\n                    return True\n        for c in range(COLUMN_COUNT):\n            for r in range(ROW_COUNT - 3):\n                if all(board[r+i][c] == piece for i in range(WINDOW_LENGTH)):\n                    return True\n        for c in range(COLUMN_COUNT - 3):\n            for r in range(ROW_COUNT - 3):\n                if all(board[r+i][c+i] == piece for i in range(WINDOW_LENGTH)):\n                    return True\n        for c in range(COLUMN_COUNT - 3):\n            for r in range(3, ROW_COUNT):\n                if all(board[r-i][c+i] == piece for i in range(WINDOW_LENGTH)):\n                    return True\n        return False\n\n    def evaluate_window(window, piece):\n        score = 0\n        opp_piece = OPPONENT_PIECE\n\n        if window.count(piece) == 4:\n            score += 100\n        elif window.count(piece) == 3 and window.count(EMPTY) == 1:\n            score += 5\n        elif window.count(piece) == 2 and window.count(EMPTY) == 2:\n            score += 2\n\n        if window.count(opp_piece) == 3 and window.count(EMPTY) == 1:\n            score -= 4\n\n        return score\n\n    def score_position(board, piece):\n        score = 0\n\n        # Center column preference\n        center_array = [int(i) for i in list(board[:, COLUMN_COUNT // 2])]\n        center_count = center_array.count(piece)\n        score += center_count * 3\n\n        # Horizontal\n        for r in range(ROW_COUNT):\n            row_array = [int(i) for i in list(board[r, :])]\n            for c in range(COLUMN_COUNT - 3):\n                window = row_array[c:c+WINDOW_LENGTH]\n                score += evaluate_window(window, piece)\n\n        # Vertical\n        for c in range(COLUMN_COUNT):\n            col_array = [int(i) for i in list(board[:, c])]\n            for r in range(ROW_COUNT - 3):\n                window = col_array[r:r+WINDOW_LENGTH]\n                score += evaluate_window(window, piece)\n\n        # Diagonal\n        for r in range(ROW_COUNT - 3):\n            for c in range(COLUMN_COUNT - 3):\n                window = [board[r+i][c+i] for i in range(WINDOW_LENGTH)]\n                score += evaluate_window(window, piece)\n        for r in range(ROW_COUNT - 3):\n            for c in range(COLUMN_COUNT - 3):\n                window = [board[r+3-i][c+i] for i in range(WINDOW_LENGTH)]\n                score += evaluate_window(window, piece)\n\n        return score\n\n    def is_terminal_node(board):\n        return winning_move(board, PLAYER_PIECE) or winning_move(board, OPPONENT_PIECE) or len(get_valid_locations(board)) == 0\n\n    def minimax(board, depth, alpha, beta, maximizingPlayer):\n        valid_locations = get_valid_locations(board)\n        is_terminal = is_terminal_node(board)\n        if depth == 0 or is_terminal:\n            if is_terminal:\n                if winning_move(board, PLAYER_PIECE):\n                    return (None, 100000000000)\n                elif winning_move(board, OPPONENT_PIECE):\n                    return (None, -100000000000)\n                else:\n                    return (None, 0)\n            else:\n                return (None, score_position(board, PLAYER_PIECE))\n        \n        if maximizingPlayer:\n            value = -np.inf\n            column = random.choice(valid_locations)\n            for col in order_moves(board, valid_locations, PLAYER_PIECE if maximizingPlayer else OPPONENT_PIECE):\n\n                row = get_next_open_row(board, col)\n                b_copy = board.copy()\n                drop_piece(b_copy, row, col, PLAYER_PIECE)\n                if winning_move(b_copy, PLAYER_PIECE):\n                    return col, 100000000000\n                new_score = minimax(b_copy, depth-1, alpha, beta, False)[1]\n                if new_score > value:\n                    value = new_score\n                    column = col\n                alpha = max(alpha, value)\n                if alpha >= beta:\n                    break\n            return column, value\n        else:\n            value = np.inf\n            column = random.choice(valid_locations)\n            for col in order_moves(board, valid_locations, PLAYER_PIECE if maximizingPlayer else OPPONENT_PIECE):\n                row = get_next_open_row(board, col)\n                b_copy = board.copy()\n                drop_piece(b_copy, row, col, OPPONENT_PIECE)\n                if winning_move(b_copy, OPPONENT_PIECE):\n                    return col, -100000000000\n                new_score = minimax(b_copy, depth-1, alpha, beta, True)[1]\n                if new_score < value:\n                    value = new_score\n                    column = col\n                beta = min(beta, value)\n                if alpha >= beta:\n                    break\n            return column, value\n\n    board = board_from_obs(observation)\n    col, minimax_score = minimax(board, MAX_DEPTH, -np.inf, np.inf, True)\n\n    return [c for c in range(COLUMN_COUNT) if board[0][c] == 0 and c == col][0]\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-30T20:58:18.324849Z","iopub.execute_input":"2025-05-30T20:58:18.325152Z","iopub.status.idle":"2025-05-30T20:58:18.354171Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"move_times = []\n\ndef timed_agent(observation, configuration):\n    start = time.time()\n    action = agent(observation, configuration)  # your original agent here\n    duration = time.time() - start\n    move_times.append(duration)\n    return action\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-30T20:58:18.360165Z","iopub.execute_input":"2025-05-30T20:58:18.360431Z","iopub.status.idle":"2025-05-30T20:58:18.378980Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"#from kaggle_environments import evaluate\n\n#results = evaluate(\"connectx\", [timed_agent, timed_agent], num_episodes=10)\n#move_times = move_times[:1]\n # reset timing log\n#print(f\"Agent vs Random: Wins={results.count([1,-1])}, Draws={results.count([0,0])}, Losses={results.count([-1,1])}\")\n\n#print(f\"Move times (seconds):\")\n#print(f\"  Total moves: {len(move_times)}\")\n#print(f\"  Min time: {min(move_times):.4f}\")\n#print(f\"  Max time: {max(move_times):.4f}\")\n#print(f\"  Average time: {sum(move_times)/len(move_times):.4f}\")","metadata":{"execution":{"iopub.status.busy":"2025-05-30T20:58:18.397731Z","iopub.execute_input":"2025-05-30T20:58:18.398032Z","iopub.status.idle":"2025-05-30T21:04:11.412564Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"env.run([timed_agent,timed_agent])\nenv.render(mode=\"ipython\", width=500, height=450)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-30T21:04:11.415467Z","iopub.execute_input":"2025-05-30T21:04:11.415770Z","iopub.status.idle":"2025-05-30T21:04:49.438488Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"\ndef write_agent_to_file(function, file):\n    with open(file, \"w\") as f:\n        # Write imports first\n        f.write(\"import numpy as np\\nimport random\\n\\n\")\n        # Then write the function code\n        f.write(inspect.getsource(function))\n    print(function.__name__, \"written to\", file)\nwrite_agent_to_file(agent, \"submission.py\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-30T21:44:56.247823Z","iopub.execute_input":"2025-05-30T21:44:56.248170Z","iopub.status.idle":"2025-05-30T21:44:56.259439Z","shell.execute_reply.started":"2025-05-30T21:44:56.248143Z","shell.execute_reply":"2025-05-30T21:44:56.258260Z"}},"outputs":[{"name":"stdout","text":"agent written to submission.py\n","output_type":"stream"}],"execution_count":9}]}