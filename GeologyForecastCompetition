{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.11","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[],"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-05-29T19:01:46.276333Z","iopub.execute_input":"2025-05-29T19:01:46.276660Z","iopub.status.idle":"2025-05-29T19:01:49.297746Z","shell.execute_reply.started":"2025-05-29T19:01:46.276631Z","shell.execute_reply":"2025-05-29T19:01:49.296809Z"}},"outputs":[{"name":"stdout","text":"/kaggle/input/geology-forecast-challenge-open/data/sample_submission.csv\n/kaggle/input/geology-forecast-challenge-open/data/interpolate_and_split.py\n/kaggle/input/geology-forecast-challenge-open/data/train.csv\n/kaggle/input/geology-forecast-challenge-open/data/test.csv\n/kaggle/input/geology-forecast-challenge-open/data/train_raw/d8e5a8c7.csv\n/kaggle/input/geology-forecast-challenge-open/data/train_raw/8b52f6eb.csv\n/kaggle/input/geology-forecast-challenge-open/data/train_raw/3e4b6d95.csv\n/kaggle/input/geology-forecast-challenge-open/data/train_raw/b11de22a.csv\n/kaggle/input/geology-forecast-challenge-open/data/train_raw/7653c7d8.csv\n/kaggle/input/geology-forecast-challenge-open/data/train_raw/a3e987cf.csv\n/kaggle/input/geology-forecast-challenge-open/data/train_raw/377566d6.csv\n/kaggle/input/geology-forecast-challenge-open/data/train_raw/41293a6e.csv\n/kaggle/input/geology-forecast-challenge-open/data/train_raw/a6acd88c.csv\n/kaggle/input/geology-forecast-challenge-open/data/train_raw/f42b52f5.csv\n/kaggle/input/geology-forecast-challenge-open/data/train_raw/3c9b6dea.csv\n/kaggle/input/geology-forecast-challenge-open/data/train_raw/a147ecb1.csv\n/kaggle/input/geology-forecast-challenge-open/data/train_raw/ba125251.csv\n/kaggle/input/geology-forecast-challenge-open/data/train_raw/7fd19ac2.csv\n/kaggle/input/geology-forecast-challenge-open/data/train_raw/93faaae3.csv\n/kaggle/input/geology-forecast-challenge-open/data/train_raw/5f9e8191.csv\n/kaggle/input/geology-forecast-challenge-open/data/train_raw/66e1c979.csv\n/kaggle/input/geology-forecast-challenge-open/data/train_raw/a5bff1be.csv\n/kaggle/input/geology-forecast-challenge-open/data/train_raw/2e2848fb.csv\n/kaggle/input/geology-forecast-challenge-open/data/train_raw/b3dd9ea4.csv\n/kaggle/input/geology-forecast-challenge-open/data/train_raw/bc251ea2.csv\n/kaggle/input/geology-forecast-challenge-open/data/train_raw/3da43bb8.csv\n/kaggle/input/geology-forecast-challenge-open/data/train_raw/a92541d0.csv\n/kaggle/input/geology-forecast-challenge-open/data/train_raw/e17ead39.csv\n/kaggle/input/geology-forecast-challenge-open/data/train_raw/b6a4ed78.csv\n/kaggle/input/geology-forecast-challenge-open/data/train_raw/d6a3bde9.csv\n/kaggle/input/geology-forecast-challenge-open/data/train_raw/6ec56c04.csv\n/kaggle/input/geology-forecast-challenge-open/data/train_raw/a3856731.csv\n/kaggle/input/geology-forecast-challenge-open/data/train_raw/356f793d.csv\n/kaggle/input/geology-forecast-challenge-open/data/train_raw/8f4560a1.csv\n/kaggle/input/geology-forecast-challenge-open/data/train_raw/0894e2a7.csv\n/kaggle/input/geology-forecast-challenge-open/data/train_raw/bbea109a.csv\n/kaggle/input/geology-forecast-challenge-open/data/train_raw/702be050.csv\n/kaggle/input/geology-forecast-challenge-open/data/train_raw/52b482cb.csv\n/kaggle/input/geology-forecast-challenge-open/data/train_raw/5557d761.csv\n/kaggle/input/geology-forecast-challenge-open/data/train_raw/e96bee35.csv\n/kaggle/input/geology-forecast-challenge-open/data/train_raw/780ab9d5.csv\n/kaggle/input/geology-forecast-challenge-open/data/train_raw/cab1f6ec.csv\n/kaggle/input/geology-forecast-challenge-open/data/train_raw/6503629a.csv\n/kaggle/input/geology-forecast-challenge-open/data/train_raw/9a23c043.csv\n/kaggle/input/geology-forecast-challenge-open/data/train_raw/a897b239.csv\n/kaggle/input/geology-forecast-challenge-open/data/train_raw/7622dfb9.csv\n/kaggle/input/geology-forecast-challenge-open/data/train_raw/291835cd.csv\n/kaggle/input/geology-forecast-challenge-open/data/train_raw/de1ab22f.csv\n/kaggle/input/geology-forecast-challenge-open/data/train_raw/550b2cb3.csv\n/kaggle/input/geology-forecast-challenge-open/data/train_raw/6e1e4d0b.csv\n/kaggle/input/geology-forecast-challenge-open/data/train_raw/5993fdc1.csv\n/kaggle/input/geology-forecast-challenge-open/data/train_raw/4d59218c.csv\n/kaggle/input/geology-forecast-challenge-open/data/train_raw/60702a4b.csv\n/kaggle/input/geology-forecast-challenge-open/data/train_raw/7927d3a6.csv\n/kaggle/input/geology-forecast-challenge-open/data/train_raw/56ccf504.csv\n/kaggle/input/geology-forecast-challenge-open/data/train_raw/92612f91.csv\n/kaggle/input/geology-forecast-challenge-open/data/train_raw/6e0d3196.csv\n/kaggle/input/geology-forecast-challenge-open/data/train_raw/b5cc6e94.csv\n/kaggle/input/geology-forecast-challenge-open/data/train_raw/b4e70652.csv\n/kaggle/input/geology-forecast-challenge-open/data/train_raw/c60a50fe.csv\n/kaggle/input/geology-forecast-challenge-open/data/train_raw/66a8e534.csv\n/kaggle/input/geology-forecast-challenge-open/data/train_raw/860b531c.csv\n/kaggle/input/geology-forecast-challenge-open/data/train_raw/4bf103cc.csv\n/kaggle/input/geology-forecast-challenge-open/data/train_raw/fab7bf87.csv\n/kaggle/input/geology-forecast-challenge-open/data/train_raw/49409041.csv\n/kaggle/input/geology-forecast-challenge-open/data/train_raw/a950d45d.csv\n/kaggle/input/geology-forecast-challenge-open/data/train_raw/30481e86.csv\n/kaggle/input/geology-forecast-challenge-open/data/train_raw/8a455ce6.csv\n/kaggle/input/geology-forecast-challenge-open/data/train_raw/b79eaaf2.csv\n/kaggle/input/geology-forecast-challenge-open/data/train_raw/8b440fd7.csv\n/kaggle/input/geology-forecast-challenge-open/data/train_raw/ab646a99.csv\n/kaggle/input/geology-forecast-challenge-open/data/train_raw/f02d0619.csv\n/kaggle/input/geology-forecast-challenge-open/data/train_raw/58502030.csv\n/kaggle/input/geology-forecast-challenge-open/data/train_raw/f289974c.csv\n/kaggle/input/geology-forecast-challenge-open/data/train_raw/54a6c4c3.csv\n/kaggle/input/geology-forecast-challenge-open/data/train_raw/8f210e79.csv\n/kaggle/input/geology-forecast-challenge-open/data/train_raw/db730cda.csv\n/kaggle/input/geology-forecast-challenge-open/data/train_raw/9ac9aa08.csv\n/kaggle/input/geology-forecast-challenge-open/data/train_raw/738c7ebb.csv\n/kaggle/input/geology-forecast-challenge-open/data/train_raw/8f434a7e.csv\n/kaggle/input/geology-forecast-challenge-open/data/train_raw/064b5bcc.csv\n/kaggle/input/geology-forecast-challenge-open/data/train_raw/12a85c1a.csv\n/kaggle/input/geology-forecast-challenge-open/data/train_raw/54f2b4cb.csv\n/kaggle/input/geology-forecast-challenge-open/data/train_raw/f954596a.csv\n/kaggle/input/geology-forecast-challenge-open/data/train_raw/832c094e.csv\n/kaggle/input/geology-forecast-challenge-open/data/train_raw/eb0fd063.csv\n/kaggle/input/geology-forecast-challenge-open/data/train_raw/46563def.csv\n/kaggle/input/geology-forecast-challenge-open/data/train_raw/bc1eb19f.csv\n/kaggle/input/geology-forecast-challenge-open/data/train_raw/fdf12f60.csv\n/kaggle/input/geology-forecast-challenge-open/data/train_raw/b7ee7080.csv\n/kaggle/input/geology-forecast-challenge-open/data/train_raw/4d01d04e.csv\n/kaggle/input/geology-forecast-challenge-open/data/train_raw/26820a88.csv\n/kaggle/input/geology-forecast-challenge-open/data/train_raw/d122603a.csv\n/kaggle/input/geology-forecast-challenge-open/data/train_raw/8c8a8d65.csv\n/kaggle/input/geology-forecast-challenge-open/data/train_raw/0c6015f0.csv\n/kaggle/input/geology-forecast-challenge-open/data/train_raw/8ab1b395.csv\n/kaggle/input/geology-forecast-challenge-open/data/train_raw/3de804c9.csv\n/kaggle/input/geology-forecast-challenge-open/data/train_raw/9f7f83a2.csv\n/kaggle/input/geology-forecast-challenge-open/data/train_raw/979e98f0.csv\n/kaggle/input/geology-forecast-challenge-open/data/train_raw/03951295.csv\n/kaggle/input/geology-forecast-challenge-open/data/train_raw/2563354f.csv\n/kaggle/input/geology-forecast-challenge-open/data/train_raw/b8919b32.csv\n/kaggle/input/geology-forecast-challenge-open/data/train_raw/ed3263a2.csv\n/kaggle/input/geology-forecast-challenge-open/data/train_raw/26632ebb.csv\n/kaggle/input/geology-forecast-challenge-open/data/train_raw/7762b1f4.csv\n/kaggle/input/geology-forecast-challenge-open/data/train_raw/5159ff75.csv\n/kaggle/input/geology-forecast-challenge-open/data/train_raw/4e33a0b4.csv\n/kaggle/input/geology-forecast-challenge-open/data/train_raw/279785e9.csv\n/kaggle/input/geology-forecast-challenge-open/data/train_raw/a48ed3f2.csv\n/kaggle/input/geology-forecast-challenge-open/data/train_raw/18ff6159.csv\n/kaggle/input/geology-forecast-challenge-open/data/train_raw/1fa7d680.csv\n/kaggle/input/geology-forecast-challenge-open/data/train_raw/781ee7fe.csv\n/kaggle/input/geology-forecast-challenge-open/data/train_raw/21969807.csv\n/kaggle/input/geology-forecast-challenge-open/data/train_raw/cd39da07.csv\n/kaggle/input/geology-forecast-challenge-open/data/train_raw/a99ad44f.csv\n/kaggle/input/geology-forecast-challenge-open/data/train_raw/12e9c363.csv\n/kaggle/input/geology-forecast-challenge-open/data/train_raw/68140632.csv\n/kaggle/input/geology-forecast-challenge-open/data/train_raw/a3b6bb4a.csv\n/kaggle/input/geology-forecast-challenge-open/data/train_raw/31eda637.csv\n/kaggle/input/geology-forecast-challenge-open/data/train_raw/cd0ca59e.csv\n/kaggle/input/geology-forecast-challenge-open/data/train_raw/6c765aee.csv\n/kaggle/input/geology-forecast-challenge-open/data/train_raw/f22af1e3.csv\n/kaggle/input/geology-forecast-challenge-open/data/train_raw/b175045a.csv\n/kaggle/input/geology-forecast-challenge-open/data/train_raw/76ecf2fc.csv\n/kaggle/input/geology-forecast-challenge-open/data/train_raw/10fbe807.csv\n/kaggle/input/geology-forecast-challenge-open/data/train_raw/730bc2cc.csv\n/kaggle/input/geology-forecast-challenge-open/data/train_raw/956125d5.csv\n","output_type":"stream"}],"execution_count":1},{"cell_type":"code","source":"  import pandas as pd\n  import numpy as np\n  import matplotlib.pyplot as plt\n  import seaborn as sns\n  from sklearn.model_selection import train_test_split\n  from sklearn.metrics import mean_squared_error\n  import xgboost as xgb\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-29T19:01:49.299496Z","iopub.execute_input":"2025-05-29T19:01:49.300208Z","iopub.status.idle":"2025-05-29T19:01:51.928844Z","shell.execute_reply.started":"2025-05-29T19:01:49.300180Z","shell.execute_reply":"2025-05-29T19:01:51.927805Z"}},"outputs":[],"execution_count":2},{"cell_type":"code","source":"  train_df = pd.read_csv('/kaggle/input/geology-forecast-challenge-open/data/train.csv')\n  test_df = pd.read_csv('/kaggle/input/geology-forecast-challenge-open/data/test.csv')\n  sample_submission = pd.read_csv('/kaggle/input/geology-forecast-challenge-open/data/sample_submission.csv')\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-29T19:02:43.826897Z","iopub.execute_input":"2025-05-29T19:02:43.827279Z","iopub.status.idle":"2025-05-29T19:02:46.444422Z","shell.execute_reply.started":"2025-05-29T19:02:43.827248Z","shell.execute_reply":"2025-05-29T19:02:46.443459Z"}},"outputs":[],"execution_count":4},{"cell_type":"markdown","source":"# EDA","metadata":{}},{"cell_type":"code","source":"  train_df.head()\n  train_df.info()\n  train_df.describe()\n  train_df.isnull().sum()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-29T19:04:15.145884Z","iopub.execute_input":"2025-05-29T19:04:15.146197Z","iopub.status.idle":"2025-05-29T19:04:19.583658Z","shell.execute_reply.started":"2025-05-29T19:04:15.146175Z","shell.execute_reply":"2025-05-29T19:04:19.582880Z"}},"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 1510 entries, 0 to 1509\nColumns: 3301 entries, geology_id to r_9_pos_300\ndtypes: float64(3300), object(1)\nmemory usage: 38.0+ MB\n","output_type":"stream"},{"execution_count":8,"output_type":"execute_result","data":{"text/plain":"geology_id       0\n-299           929\n-298           928\n-297           925\n-296           924\n              ... \nr_9_pos_296      0\nr_9_pos_297      0\nr_9_pos_298      0\nr_9_pos_299      0\nr_9_pos_300      0\nLength: 3301, dtype: int64"},"metadata":{}}],"execution_count":8},{"cell_type":"code","source":"# Known geology features (-299 to 0)\nknown_features = [str(i) for i in range(-299, 1)]\n# Targets (1 to 300)\ntarget_columns = [str(i) for i in range(1, 301)]\n\n# Plot example Z-values from known geology\nplt.figure(figsize=(10, 4))\nsns.lineplot(data=train_df[known_features].iloc[0])\nplt.title(\"Known Layer Depths for First Sample\")\nplt.xlabel(\"X position\")\nplt.ylabel(\"Z depth (up, feet)\")\nplt.show()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-29T19:05:24.928814Z","iopub.execute_input":"2025-05-29T19:05:24.929405Z","iopub.status.idle":"2025-05-29T19:05:26.354725Z","shell.execute_reply.started":"2025-05-29T19:05:24.929349Z","shell.execute_reply":"2025-05-29T19:05:26.353433Z"}},"outputs":[{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n/usr/local/lib/python3.11/dist-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 1000x400 with 1 Axes>","image/png":"iVBORw0KGgoAAAANSUhEUgAAA0wAAAGJCAYAAAC5J7OZAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8pXeV/AAAACXBIWXMAAA9hAAAPYQGoP6dpAAB5LUlEQVR4nO3dd3hUVf4/8PeUzEzapPfJDIRe0yATegdRlCY1KDbsFctX11XBssqi4lp+rru6Ygll6aso9gJoQiBU6S2TSkJJ7zPn90e8l0ySCQkkTELer+eZB3Ju+9w7t33m3HOuQgghQERERERERPUonR0AERERERFRW8WEiYiIiIiIyAEmTERERERERA4wYSIiIiIiInKACRMREREREZEDTJiIiIiIiIgcYMJERERERETkABMmIiIiIiIiB5gwEREREREROcCEiYiIOpxOnTph0qRJrbqMY8eOYfz48fDy8oJCocDGjRtbdXmX0qlTJ9x2221OjaG9WrRoERQKhbPDICInYcJERG3O8uXLoVAosHPnTrvygoICxMXFQafTYcuWLU6KrnVIN2Rnz551digtolOnTlAoFFAoFFAqlfD29ka/fv1w9913Izk5+arEcPDgQSxatAinT5++Ksura/78+di/fz9eeeUVfPbZZxgwYECrLev06dPy9q77iY+Pb5VlrlixAm+99VaTx6+srMQ//vEPREdHQ6/Xw9vbG3369MHdd9+Nw4cPt0qMREQtQe3sAIiImqKwsBDjx4/Hvn37sGHDBlx33XXODokuISoqCo8//jgAoKioCIcOHcKaNWvw73//G4899hjefPPNVl3+wYMHsXjxYowcORKdOnVq1WXVVVZWht9//x3PPvssHnzwwau23Dlz5uD666+3KwsICAAAHDlyBEply/1OumLFChw4cACPPvpok8afPn06vv76a8yZMwcLFixAVVUVDh8+jC+//BKDBw9Gz549Wyw2IqKWxISJiNq8oqIiTJgwAXv27MH69esxceJEZ4fU4VVXV8Nms0Gj0TgcJywsDPPmzbMrW7JkCebOnYtly5ahW7duuO+++1o7VKfIy8sDAHh7e7fYPEtKSuDu7t7oODExMfW2uUSr1bbIMi5HSkoKvvzyS7zyyiv4y1/+Yjfs3XffRX5+fosvk4iopfCRPCJq04qLi3HdddchNTUV69atww033GA3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w+n+9a9/idjYWOHq6io8PT1Fv379xFNPPSWysrLs5n3DDTeIb775RvTv319otVrRs2dPsWbNmnrz+/e//y0iIiKESqWq18V2Q92F192WL7/8soiLixPe3t7C1dVV9OzZU7zyyivytnGksW2WmpoqJkyYIDw8PISbm5sYNWpUve+nsWOgucuTOOpWvO4yKioqxJNPPikiIyOFp6encHd3F5GRkeL//b//ZzdecXGxmDt3rvD29pZfA+DImTNnxGuvvSZGjBghQkJChFqtFj4+PmL06NFi7dq1duNeuHBB3H777cLf3194eHiICRMmiMOHDzc5fkdd9Nc9V9TeZm+88YYIDw8XWq1WDBs2TOzdu7fBeda1bt06MXToUOHu7i7c3d1Fz549xQMPPCCOHDnicFsQUfujEKKFWkASEVGbM3XqVOzfvx/Hjx93digtplOnTujbty++/PJLZ4dC7djp06fRuXNnLF26lLVBRNQotmEiIrpGZWdnY/PmzbjlllucHQoREVG7xTZMRETXmFOnTmH79u348MMP4eLiYtdWiIiIiJqHNUxERNeYX375BbfccgtOnTqFTz75RO41joiIiJqPbZiIiIiIiIgcYA0TERERERGRA0yYiIiIiIiIHOhQnT7YbDZkZWXB09NTfhElERERERF1PEIIFBUVITQ0FEql43qkDpUwZWVlITw83NlhEBERERFRG5Geng6DweBweIdKmDw9PQHUbBS9Xu/kaIiIiIiIyFkKCwsRHh4u5wiOdKiESXoMT6/XM2EiIiIiIqJLNtVhpw9EREREREQOMGEiIiIiIiJygAkTERERERGRA0yYiIiIiIiIHGDCRERERERE5AATJiIiIiIiIgeYMBERERERETnQ7hKm9957D506dYJOp4PZbMaOHTucHRIREREREV2j2lXCtHr1aixcuBAvvPACUlNTERkZiQkTJiA3N9fZoRERERER0TWoXSVMb775JhYsWIDbb78dvXv3xj//+U+4ubnhP//5j7NDIyIiIiKiRpRWVmN1igXHc4ucHUqzqJ0dQFNVVlZi165deOaZZ+QypVKJsWPH4vfff29wmoqKClRUVMh/FxYWtnqcRERERER00dEzRUhMSsP61EwUVVTjlngTXprS19lhNVm7SZjOnj0Lq9WKoKAgu/KgoCAcPny4wWleffVVLF68+GqER0RE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Hh6OZ5991kmRAbNmzcLRo0flvxctWoSoqKh642VnZ2PixIlXMTIiInImJkxERHTVqFQqLF++HFu2bEFiYqJc/tBDD8HX1xcvvPCC02JzdXVFYGDgJccLDg6GVqu9ChEREVFbwISJiIiuqu7du+O1117DQw89hOzsbGzatAmrVq3Cp59+Co1G43C6Tp064aWXXsKcOXPg7u6OsLAwvPfee3bjWCwWTJ48GR4eHtDr9Zg5cybOnDkjD9+7dy9GjRoFT09P6PV6xMbGYufOnQDsH8lbvnw5Fi9ejL1790KhUEChUGD58uUA6j+St3//fowePRqurq7w8/PD3XffjeLiYnn4bbfdhilTpuD1119HSEgI/Pz88MADD6CqquoKtyQREV0NTJiIiOiqe+ihhxAZGYlbbrkFd999N55//nlERkZecrqlS5ciMjISu3fvxtNPP41HHnkE3333HQDAZrNh8uTJOH/+PH755Rd89913OHnyJGbNmiVPn5CQAIPBgJSUFOzatQtPP/00XFxc6i1n1qxZePzxx9GnTx9kZ2cjOzvbbj6SkpISTJgwAT4+PkhJScGaNWvw/fff48EHH7Qb76effsKJEyfw008/4ZNPPsHy5cvlBIyIiNo2tbMDICKijkehUOD9999Hr1690K9fPzz99NNNmm7IkCHyuN27d8f27duxbNkyjBs3Dj/88AP279+PU6dOITw8HADw6aefok+fPkhJScHAgQNhsVjw5JNPomfPngCAbt26NbgcV1dXeHh4QK1WIzg42GE8K1asQHl5OT799FO4u7sDAN59913ceOONWLJkCYKCggAAPj4+ePfdd6FSqdCzZ0/ccMMN+OGHH7BgwYKmbTAiInIa1jAREZFT/Oc//4GbmxtOnTqFjIyMJk0zaNCgen8fOnQIAHDo0CGEh4fLyRIA9O7dG97e3vI4CxcuxF133YWxY8fitddew4kTJ65oHQ4dOoTIyEg5WQJqkjqbzYYjR47IZX369IFKpZL/DgkJQW5u7hUtm4iIrg4mTEREdNX99ttvWLZsGb788kvExcXhzjvvhBCi1Ze7aNEi/PHHH7jhhhvw448/onfv3tiwYUOrL7fuY38KhQI2m63Vl0tERFeOCRMREV1VpaWluO2223Dfffdh1KhR+Oijj7Bjxw7885//vOS0SUlJ9f7u1asXAKBXr15IT09Henq6PPzgwYPIz89H79695bLu3bvjsccew7fffotp06bh448/bnBZGo0GVqu10Xh69eqFvXv3oqSkRC7bvn07lEolevToccn1ISKito8JExERXVXPPPMMhBB47bXXANT0fvf666/jqaeewunTpxuddvv27fj73/+Oo0eP4r333sOaNWvwyCOPAADGjh2Lfv36ISEhAampqdixYwduvfVWjBgxAgMGDEBZWRkefPBB/Pzzz0hLS8P27duRkpIiJ1x1derUCadOncKePXtw9uxZVFRU1BsnISEBOp0O8+fPx4EDB/DTTz/hoYcewi233CK3XyIiovaNCRMREV01v/zyC9577z18/PHHcHNzk8vvueceDB48+JKP5j3++OPYuXMnoqOj8fLLL+PNN9/EhAkTANQ85rZp0yb4+Phg+PDhGDt2LCIiIrB69WoANe+AOnfuHG699VZ0794dM2fOxMSJE7F48eIGlzV9+nRcd911GDVqFAICArBy5cp647i5ueGbb77B+fPnMXDgQNx8880YM2YM3n333SvZTERE1IYoxNV4aJyIiOgKderUCY8++igeffRRZ4dCREQdCGuYiIiIiIiIHGDCRERERERE5AAfySMiIiIiInKANUxEREREREQOMGEiIiIiIiJygAkTERERERGRA0yYiIiIiIiIHGDCRERERERE5AATJiIiIiIiIgeYMBERERERETnAhImIiIiIiMiB/w8PmVQZOhIHrgAAAABJRU5ErkJggg==\n"},"metadata":{}}],"execution_count":10},{"cell_type":"markdown","source":"# Preprocessing","metadata":{}},{"cell_type":"code","source":"train_df[known_features] = train_df[known_features].fillna(method='ffill', axis=1)\n\n# Replace NaNs with 0 or interpolation if necessary\ntrain_df.fillna(0, inplace=True)\n\n# Prepare feature matrix X and target matrix y\nX = train_df[known_features].values\ny = train_df[target_columns].values","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-29T19:05:47.768831Z","iopub.execute_input":"2025-05-29T19:05:47.769139Z","iopub.status.idle":"2025-05-29T19:05:47.863557Z","shell.execute_reply.started":"2025-05-29T19:05:47.769118Z","shell.execute_reply":"2025-05-29T19:05:47.862504Z"}},"outputs":[{"name":"stderr","text":"/tmp/ipykernel_35/1693178018.py:1: FutureWarning: DataFrame.fillna with 'method' is deprecated and will raise in a future version. Use obj.ffill() or obj.bfill() instead.\n  train_df[known_features] = train_df[known_features].fillna(method='ffill', axis=1)\n","output_type":"stream"}],"execution_count":11},{"cell_type":"markdown","source":"# Modeling","metadata":{}},{"cell_type":"code","source":"import xgboost as xgb\nfrom sklearn.multioutput import MultiOutputRegressor\n\nbase_model = xgb.XGBRegressor(n_estimators=100, learning_rate=0.1, max_depth=3, verbosity=0)\nmodel = MultiOutputRegressor(base_model)\nmodel.fit(X_train, y_train)\n\ny_pred = model.predict(X_val)\nmse = mean_squared_error(y_val, y_pred)\nprint(f\"Validation MSE: {mse:.4f}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-29T19:08:40.263375Z","iopub.execute_input":"2025-05-29T19:08:40.263692Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"sample_idx = 0\nplt.plot(range(1, 301), y_val[sample_idx], label='True')\nplt.plot(range(1, 301), y_pred[sample_idx], label='Predicted')\nplt.title(\"Sample Geology Prediction\")\nplt.xlabel(\"X position\")\nplt.ylabel(\"Z depth (up, feet)\")\nplt.legend()\nplt.show()","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# Prediction & submissions","metadata":{}},{"cell_type":"code","source":"\n# Get known input features from test set\nknown_features = [str(i) for i in range(-299, 1)]\nX_test = test_df[known_features].fillna(method='ffill', axis=1).fillna(0).values\n# Predict target columns (1..300)\ntest_preds = model.predict(X_test)\n\n# Make sure predictions shape is correct\nassert test_preds.shape[1] == 300\n\n# Build submission DataFrame\nsubmission = pd.DataFrame(test_preds, columns=[str(i) for i in range(1, 301)])\nsubmission.insert(0, \"geology_id\", test_df[\"geology_id\"])\n\n# Preview\nsubmission.head()\n\nsubmission.to_csv(\"submission.csv\", index=False)\nprint(\"Submission file created successfully.\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-29T19:07:47.266576Z","iopub.execute_input":"2025-05-29T19:07:47.266974Z","iopub.status.idle":"2025-05-29T19:07:47.609214Z","shell.execute_reply.started":"2025-05-29T19:07:47.266949Z","shell.execute_reply":"2025-05-29T19:07:47.608253Z"}},"outputs":[{"name":"stderr","text":"/tmp/ipykernel_35/2078223203.py:3: FutureWarning: DataFrame.fillna with 'method' is deprecated and will raise in a future version. Use obj.ffill() or obj.bfill() instead.\n  X_test = test_df[known_features].fillna(method='ffill', axis=1).fillna(0).values\n","output_type":"stream"},{"name":"stdout","text":"Submission file created successfully.\n","output_type":"stream"}],"execution_count":17}]}