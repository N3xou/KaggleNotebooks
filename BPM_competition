{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":91720,"databundleVersionId":13345277,"sourceType":"competition"}],"dockerImageVersionId":31153,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# bpm_analysis_pretty.py\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom tabulate import tabulate  # for pretty printing tables\n\n# 1. Load the dataset\ndata = pd.read_csv(\"/kaggle/input/playground-series-s5e9/train.csv\")\n\n# 2. Pretty print section headers\ndef print_section(title):\n    print(\"\\n\" + \"=\"*len(title))\n    print(title)\n    print(\"=\"*len(title))\n\n# 3. Preview the data\nprint_section(\"First 5 Rows of the Dataset\")\nprint(tabulate(data.head(), headers='keys', tablefmt='pretty', showindex=False))\n\nprint_section(\"Dataset Info\")\nprint(data.info())\n\nprint_section(\"Summary Statistics\")\nprint(tabulate(data.describe(), headers='keys', tablefmt='pretty'))\n\n# 4. Check for missing values\nprint_section(\"Missing Values per Column\")\nmissing = data.isnull().sum()\nprint(tabulate(missing.reset_index().rename(columns={'index': 'Column', 0: 'Missing Values'}), \n               headers='keys', tablefmt='pretty'))\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-07T17:58:29.952992Z","iopub.execute_input":"2025-10-07T17:58:29.953325Z","iopub.status.idle":"2025-10-07T17:58:31.140385Z","shell.execute_reply.started":"2025-10-07T17:58:29.953299Z","shell.execute_reply":"2025-10-07T17:58:31.139137Z"}},"outputs":[{"name":"stdout","text":"\n===========================\nFirst 5 Rows of the Dataset\n===========================\n+-----+-------------+---------------+--------------+-----------------+-------------------+---------------------------+-------------+-----------------+-------------+----------------+\n| id  | RhythmScore | AudioLoudness | VocalContent | AcousticQuality | InstrumentalScore | LivePerformanceLikelihood |  MoodScore  | TrackDurationMs |   Energy    | BeatsPerMinute |\n+-----+-------------+---------------+--------------+-----------------+-------------------+---------------------------+-------------+-----------------+-------------+----------------+\n| 0.0 | 0.603609719 | -7.636942085  |    0.0235    |    5.36e-06     |     1.07e-06      |        0.051385456        | 0.409866259 |   290715.645    | 0.826266667 |    147.5302    |\n| 1.0 | 0.639451219 | -16.26759827  | 0.071519503  |   0.444929072   |    0.349414237    |        0.170522335        | 0.651010252 |   164519.5174   |   0.1454    |   136.15963    |\n| 2.0 | 0.514537839 | -15.95357513  |  0.11071451  |   0.173698645   |    0.453814246    |        0.029575596        | 0.42386496  |   174495.5667   | 0.624666667 |    55.31989    |\n| 3.0 | 0.734462607 |    -1.357     | 0.052964628  |   0.001650837   |    0.159717235    |        0.086365902        | 0.278745202 |   225567.4651   | 0.487466667 |   147.91212    |\n| 4.0 | 0.532968486 | -13.05643748  |    0.0235    |   0.068686967   |     1.07e-06      |        0.331345291        | 0.477769101 |   213960.6789   | 0.947333333 |    89.58511    |\n+-----+-------------+---------------+--------------+-----------------+-------------------+---------------------------+-------------+-----------------+-------------+----------------+\n\n============\nDataset Info\n============\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 524164 entries, 0 to 524163\nData columns (total 11 columns):\n #   Column                     Non-Null Count   Dtype  \n---  ------                     --------------   -----  \n 0   id                         524164 non-null  int64  \n 1   RhythmScore                524164 non-null  float64\n 2   AudioLoudness              524164 non-null  float64\n 3   VocalContent               524164 non-null  float64\n 4   AcousticQuality            524164 non-null  float64\n 5   InstrumentalScore          524164 non-null  float64\n 6   LivePerformanceLikelihood  524164 non-null  float64\n 7   MoodScore                  524164 non-null  float64\n 8   TrackDurationMs            524164 non-null  float64\n 9   Energy                     524164 non-null  float64\n 10  BeatsPerMinute             524164 non-null  float64\ndtypes: float64(10), int64(1)\nmemory usage: 44.0 MB\nNone\n\n==================\nSummary Statistics\n==================\n+-------+-------------------+---------------------+-------------------+----------------------+---------------------+---------------------+---------------------------+---------------------+--------------------+---------------------+--------------------+\n|       |        id         |     RhythmScore     |   AudioLoudness   |     VocalContent     |   AcousticQuality   |  InstrumentalScore  | LivePerformanceLikelihood |      MoodScore      |  TrackDurationMs   |       Energy        |   BeatsPerMinute   |\n+-------+-------------------+---------------------+-------------------+----------------------+---------------------+---------------------+---------------------------+---------------------+--------------------+---------------------+--------------------+\n| count |     524164.0      |      524164.0       |     524164.0      |       524164.0       |      524164.0       |      524164.0       |         524164.0          |      524164.0       |      524164.0      |      524164.0       |      524164.0      |\n| mean  |     262081.5      | 0.6328432020360018  | -8.37901437502717 | 0.07444294505726992  | 0.26291257226875914 | 0.11769023128813944 |    0.17839834529060913    | 0.5558431960329171  | 241903.69294862452 | 0.5009225730657935  | 119.03489938795873 |\n|  std  | 151313.2575864878 | 0.15689919180690814 | 4.616221224479314 | 0.049938551626995696 | 0.22312020199854338 | 0.1318446610506647  |    0.11818560201830622    | 0.22548019690109708 | 59326.60150074707  | 0.28995228436634435 | 26.46807721218689  |\n|  min  |        0.0        |       0.0769        |   -27.50972513    |        0.0235        |      5.36e-06       |      1.07e-06       |          0.0243           |       0.0256        |      63973.0       |      6.67e-05       |       46.718       |\n|  25%  |     131040.75     |     0.515849557     |  -11.5519332725   |        0.0235        |     0.069413096     |      1.07e-06       |    0.07763710324999999    |    0.40392076525    |   207099.876625    |     0.254933333     |     101.07041      |\n|  50%  |     262081.5      |     0.634686335     |   -8.2524990605   | 0.06642450450000001  | 0.24250187499999998 |    0.0742474575     |        0.166326743        |     0.56481712      |    243684.05815    |       0.5118        |     118.74766      |\n|  75%  |     393122.25     |     0.739179248     |   -4.912298364    | 0.10734286574999999  | 0.39695659099999997 |     0.204065493     |        0.26894622         |     0.71663262      |    281851.6585     |        0.746        |     136.68659      |\n|  max  |     524163.0      |        0.975        |      -1.357       |     0.256401015      |        0.995        |     0.869257975     |        0.599924031        |        0.978        |    464723.2281     |         1.0         |      206.037       |\n+-------+-------------------+---------------------+-------------------+----------------------+---------------------+---------------------+---------------------------+---------------------+--------------------+---------------------+--------------------+\n\n=========================\nMissing Values per Column\n=========================\n+----+---------------------------+----------------+\n|    |          Column           | Missing Values |\n+----+---------------------------+----------------+\n| 0  |            id             |       0        |\n| 1  |        RhythmScore        |       0        |\n| 2  |       AudioLoudness       |       0        |\n| 3  |       VocalContent        |       0        |\n| 4  |      AcousticQuality      |       0        |\n| 5  |     InstrumentalScore     |       0        |\n| 6  | LivePerformanceLikelihood |       0        |\n| 7  |         MoodScore         |       0        |\n| 8  |      TrackDurationMs      |       0        |\n| 9  |          Energy           |       0        |\n| 10 |      BeatsPerMinute       |       0        |\n+----+---------------------------+----------------+\n","output_type":"stream"}],"execution_count":4},{"cell_type":"code","source":"# bpm_model.py\n\nimport pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score\nfrom tabulate import tabulate\n\n# ==========================\n# 1. Load the datasets\n# ==========================\ntrain_path = \"/kaggle/input/playground-series-s5e9/train.csv\"\ntest_path  = \"/kaggle/input/playground-series-s5e9/test.csv\"\n\ntrain = pd.read_csv(train_path)\ntest = pd.read_csv(test_path)\n\n# Drop 'id' since it's not predictive\nX = train.drop(columns=['id', 'BeatsPerMinute'])\ny = train['BeatsPerMinute']\n\n# Align test columns\nX_test = test.drop(columns=['id'])\n\n# ==========================\n# 3. Handle missing values\n# ==========================\nX = X.fillna(X.mean())\nX_test = X_test.fillna(X.mean())\n\n# ==========================\n# 4. Split for validation\n# ==========================\nX_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# ==========================\n# 5. Train a regression model\n# ==========================\nmodel = RandomForestRegressor(\n    n_estimators=200,\n    max_depth=10,\n    random_state=42,\n    n_jobs=-1\n)\nmodel.fit(X_train, y_train)\n\n# ==========================\n# 6. Evaluate model\n# ==========================\ny_pred = model.predict(X_val)\n\nmae = mean_absolute_error(y_val, y_pred)\nmse = mean_squared_error(y_val, y_pred)\nr2  = r2_score(y_val, y_pred)\n\nprint(\"\\n=== Model Performance on Validation Set ===\")\nprint(tabulate([\n    [\"Mean Absolute Error\", f\"{mae:.2f}\"],\n    [\"Mean Squared Error\", f\"{mse:.2f}\"],\n    [\"R² Score\", f\"{r2:.3f}\"]\n], headers=[\"Metric\", \"Value\"], tablefmt='pretty'))\n\n# ==========================\n# 7. Predict on test data\n# ==========================\ntest_predictions = model.predict(X_test)\n\n# Create submission DataFrame\nsubmission = pd.DataFrame({\n    \"id\": test[\"id\"],\n    \"BeatsPerMinute\": test_predictions\n})\n\n# Save predictions\nsubmission.to_csv(\"bpm_predictions.csv\", index=False)\n\nprint(\"\\n✅ Predictions saved to bpm_predictions.csv\")\n\n# ==========================\n# 8. Feature importance (optional)\n# ==========================\nimport matplotlib.pyplot as plt\n\nfeat_importance = pd.Series(model.feature_importances_, index=X.columns).sort_values(ascending=False)\n\nplt.figure(figsize=(8,4))\nfeat_importance.plot(kind='bar')\nplt.title(\"Feature Importance for BPM Prediction\")\nplt.ylabel(\"Importance\")\nplt.grid(axis='y')\nplt.tight_layout()\nplt.show()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-07T17:59:43.869968Z","iopub.execute_input":"2025-10-07T17:59:43.870256Z"}},"outputs":[{"name":"stdout","text":"\n=== Training Data Sample ===\n+-----+-------------+---------------+--------------+-----------------+-------------------+---------------------------+-------------+-----------------+-------------+----------------+\n| id  | RhythmScore | AudioLoudness | VocalContent | AcousticQuality | InstrumentalScore | LivePerformanceLikelihood |  MoodScore  | TrackDurationMs |   Energy    | BeatsPerMinute |\n+-----+-------------+---------------+--------------+-----------------+-------------------+---------------------------+-------------+-----------------+-------------+----------------+\n| 0.0 | 0.603609719 | -7.636942085  |    0.0235    |    5.36e-06     |     1.07e-06      |        0.051385456        | 0.409866259 |   290715.645    | 0.826266667 |    147.5302    |\n| 1.0 | 0.639451219 | -16.26759827  | 0.071519503  |   0.444929072   |    0.349414237    |        0.170522335        | 0.651010252 |   164519.5174   |   0.1454    |   136.15963    |\n| 2.0 | 0.514537839 | -15.95357513  |  0.11071451  |   0.173698645   |    0.453814246    |        0.029575596        | 0.42386496  |   174495.5667   | 0.624666667 |    55.31989    |\n| 3.0 | 0.734462607 |    -1.357     | 0.052964628  |   0.001650837   |    0.159717235    |        0.086365902        | 0.278745202 |   225567.4651   | 0.487466667 |   147.91212    |\n| 4.0 | 0.532968486 | -13.05643748  |    0.0235    |   0.068686967   |     1.07e-06      |        0.331345291        | 0.477769101 |   213960.6789   | 0.947333333 |    89.58511    |\n+-----+-------------+---------------+--------------+-----------------+-------------------+---------------------------+-------------+-----------------+-------------+----------------+\n","output_type":"stream"}],"execution_count":null}]}