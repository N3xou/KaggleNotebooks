{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.11","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":86518,"databundleVersionId":9809560,"sourceType":"competition"}],"dockerImageVersionId":31012,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-05-11T17:04:28.789956Z","iopub.execute_input":"2025-05-11T17:04:28.790273Z","iopub.status.idle":"2025-05-11T17:04:29.209041Z","shell.execute_reply.started":"2025-05-11T17:04:28.790250Z","shell.execute_reply":"2025-05-11T17:04:29.207422Z"}},"outputs":[{"name":"stdout","text":"/kaggle/input/llm-classification-finetuning/sample_submission.csv\n/kaggle/input/llm-classification-finetuning/train.csv\n/kaggle/input/llm-classification-finetuning/test.csv\n","output_type":"stream"}],"execution_count":1},{"cell_type":"code","source":"\n# Load your dataset\ntrain_df = pd.read_csv(\"/kaggle/input/llm-classification-finetuning/train.csv\")\ntest_df = pd.read_csv(\"/kaggle/input/llm-classification-finetuning/test.csv\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-11T17:09:28.047543Z","iopub.execute_input":"2025-05-11T17:09:28.047913Z","iopub.status.idle":"2025-05-11T17:09:30.291062Z","shell.execute_reply.started":"2025-05-11T17:09:28.047845Z","shell.execute_reply":"2025-05-11T17:09:30.290164Z"}},"outputs":[],"execution_count":6},{"cell_type":"code","source":"def extract_features(df):\n    features = pd.DataFrame()\n    features[\"prompt_len_char\"] = df[\"prompt\"].str.len()\n    features[\"prompt_len_words\"] = df[\"prompt\"].str.split().apply(len)\n\n    features[\"response_a_len_char\"] = df[\"response_a\"].str.len()\n    features[\"response_b_len_char\"] = df[\"response_b\"].str.len()\n\n    features[\"response_a_len_words\"] = df[\"response_a\"].str.split().apply(len)\n    features[\"response_b_len_words\"] = df[\"response_b\"].str.split().apply(len)\n\n    # Differences\n    features[\"diff_char_len\"] = features[\"response_a_len_char\"] - features[\"response_b_len_char\"]\n    features[\"diff_word_len\"] = features[\"response_a_len_words\"] - features[\"response_b_len_words\"]\n\n    return features\n\nX_train = extract_features(train_df)\nX_test = extract_features(test_df)\n\ny_train = train_df[[\"winner_model_a\", \"winner_model_b\", \"winner_tie\"]].values\ny_train = np.argmax(y_train, axis=1)\n\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.pipeline import make_pipeline\n\n# Build a pipeline with scaling\nmodel = make_pipeline(StandardScaler(), LogisticRegression(multi_class='multinomial', max_iter=1000))\n\n# Train model\nmodel.fit(X_train, y_train)\n\n# Predict class probabilities\nprobs = model.predict_proba(X_test)\n\n\n# Create final submission DataFrame\nsubmission_df = test_df[[\"id\"]].copy()\nsubmission_df[\"winner_model_a\"] = probs[:, 0]\nsubmission_df[\"winner_model_b\"] = probs[:, 1]\nsubmission_df[\"winner_tie\"] = probs[:, 2]\n\n# Save\nsubmission_df.to_csv(\"submission.csv\", index=False)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-11T17:15:24.526721Z","iopub.execute_input":"2025-05-11T17:15:24.528466Z","iopub.status.idle":"2025-05-11T17:15:30.700472Z","shell.execute_reply.started":"2025-05-11T17:15:24.528371Z","shell.execute_reply":"2025-05-11T17:15:30.698695Z"}},"outputs":[{"name":"stdout","text":"[[0.32641609 0.33937221 0.33421171]\n [0.43652251 0.24622818 0.31724931]\n [0.43431071 0.2894982  0.27619109]]\n","output_type":"stream"}],"execution_count":10}]}