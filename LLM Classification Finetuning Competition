{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.11","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":86518,"databundleVersionId":9809560,"sourceType":"competition"}],"dockerImageVersionId":31012,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-05-11T17:04:28.789956Z","iopub.execute_input":"2025-05-11T17:04:28.790273Z","iopub.status.idle":"2025-05-11T17:04:29.209041Z","shell.execute_reply.started":"2025-05-11T17:04:28.790250Z","shell.execute_reply":"2025-05-11T17:04:29.207422Z"}},"outputs":[{"name":"stdout","text":"/kaggle/input/llm-classification-finetuning/sample_submission.csv\n/kaggle/input/llm-classification-finetuning/train.csv\n/kaggle/input/llm-classification-finetuning/test.csv\n","output_type":"stream"}],"execution_count":1},{"cell_type":"code","source":"\n# Load your dataset\ndf = pd.read_csv(\"/kaggle/input/llm-classification-finetuning/train.csv\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-11T17:04:29.210904Z","iopub.execute_input":"2025-05-11T17:04:29.211503Z","iopub.status.idle":"2025-05-11T17:04:31.396793Z","shell.execute_reply.started":"2025-05-11T17:04:29.211465Z","shell.execute_reply":"2025-05-11T17:04:31.395263Z"}},"outputs":[],"execution_count":2},{"cell_type":"code","source":"df_pred = df[[\"id\"]].copy()\ndf_pred[\"winner_model_a\"] = 1/3\ndf_pred[\"winner_model_b\"] = 1/3\ndf_pred[\"winner_tie\"] = 1/3\n#df_pred.to_csv(\"submission.csv\", index=False)\nprint(df_pred.head())\nprint(df_pred.dtypes)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-11T17:04:31.397778Z","iopub.execute_input":"2025-05-11T17:04:31.398140Z","iopub.status.idle":"2025-05-11T17:04:31.756100Z","shell.execute_reply.started":"2025-05-11T17:04:31.398109Z","shell.execute_reply":"2025-05-11T17:04:31.755226Z"}},"outputs":[{"name":"stdout","text":"       id  winner_model_a  winner_model_b  winner_tie\n0   30192        0.333333        0.333333    0.333333\n1   53567        0.333333        0.333333    0.333333\n2   65089        0.333333        0.333333    0.333333\n3   96401        0.333333        0.333333    0.333333\n4  198779        0.333333        0.333333    0.333333\nid                  int64\nwinner_model_a    float64\nwinner_model_b    float64\nwinner_tie        float64\ndtype: object\n","output_type":"stream"}],"execution_count":3},{"cell_type":"code","source":"# Check the sum of each class column\nlabel_counts = {\n    \"winner_model_a\": df[\"winner_model_a\"].sum(),\n    \"winner_model_b\": df[\"winner_model_b\"].sum(),\n    \"winner_tie\": df[\"winner_tie\"].sum()\n}\n\n# Total number of examples\ntotal = len(df)\n\n# Convert to probabilities\nlabel_probs = {k: v / total for k, v in label_counts.items()}\nprint(\"Class Probabilities:\", label_probs)\n","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}